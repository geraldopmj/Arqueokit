# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Arqueokit
                                 A QGIS plugin
 GIS algorithms for Archaeologists
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-19
        copyright            : (C) 2025 by Geraldo Pereira de Morais Júnior
        email                : geraldo.pmj@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Geraldo Pereira de Morais Júnior'
__date__ = '2025-07-19'
__copyright__ = '(C) 2025 by Geraldo Pereira de Morais Júnior'
__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from qgis.PyQt.QtGui import QIcon
import os
from .raster_bivariate import BivariateRaster
from .raster_bivariate_rgb import BivariateRasterRGB
from .iphan_download import IphanDownloader
from .funai_download import FunaiDownloader
from .attribute_nwse_ordering import OrdenarPontosNWSE
from .geoprocess_best_grid import best_grid
from .attribute_add_x_y import add_x_y
from .graph_count_attribute_unique import CountUniqueAttribute
from .graph_aggregation_atribute import AttributeAggregationPlot
from .graph_bundown import BurndownTemporal
from .graph_aggregation_feature import FeatureSumPlot
from .geoprocess_radial_points import radial_points
from .attribute_for_survey import AddRecordAttributes


class ArqueokitProvider(QgsProcessingProvider):

    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        self.addAlgorithm(BivariateRaster())
        self.addAlgorithm(BivariateRasterRGB())
        self.addAlgorithm(IphanDownloader())
        self.addAlgorithm(FunaiDownloader())
        self.addAlgorithm(OrdenarPontosNWSE())
        self.addAlgorithm(best_grid())
        self.addAlgorithm(add_x_y())
        self.addAlgorithm(CountUniqueAttribute())
        self.addAlgorithm(AttributeAggregationPlot())
        self.addAlgorithm(BurndownTemporal())
        self.addAlgorithm(FeatureSumPlot())
        self.addAlgorithm(radial_points())
        self.addAlgorithm(AddRecordAttributes())
        
    def id(self):
        """
        Returns the unique provider id, used for identifying the provider. This
        string should be a unique, short, character only string, eg "qgis" or
        "gdal". This string should not be localised.
        """
        return 'Arqueokit'

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.

        This string should be short (e.g. "Lastools") and localised.
        """
        return self.tr('Arqueokit')

    def icon(self):
        return QIcon(os.path.join(os.path.dirname(__file__), 'icon.png'))

    def longName(self):
        """
        Returns the a longer version of the provider name, which can include
        extra details such as version numbers. E.g. "Lastools LIDAR tools
        (version 2.2.1)". This string should be localised. The default
        implementation returns the same string as name().
        """
        return self.name()
